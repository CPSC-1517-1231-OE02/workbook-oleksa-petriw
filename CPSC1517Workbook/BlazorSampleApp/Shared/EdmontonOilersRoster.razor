@page "/edmonton-oilers"
@using Hockey.Data

<h3>EdmontonOilersRoster</h3>
<p>
    This Blazor component displays a list of players on the Edmonton Oilers 2023-24 roster.
    The data is loaded from a CSV file.
</p>

@if (FeedbackMessage != null)
{
    <div class="alert alert-danger">
        @FeedbackMessage
    </div>
}

@if (Players.Count > 0)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Jersey</th>
                <th>Pos</th>
                <th>Shot</th>
                <th>Height</th>
                <th>Weight</th>
                <th>Hometown</th>
                <th>DOB</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var currentPlayer in Players)
            {
                <tr>
                    <td>@currentPlayer.FirstName @currentPlayer.LastName</td>
                    <td>@currentPlayer.JerseyNumber</td>
                    <td>@currentPlayer.Position</td>
                    <td>@currentPlayer.Shot</td>
                    <td>@currentPlayer.HeightInInches</td>
                    <td>@currentPlayer.WeightInPounds</td>
                    <td>@currentPlayer.BirthPlace</td>
                    <td>@currentPlayer.DateOfBirth.ToString("d")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string? FeedbackMessage { get; set; }
    private List<HockeyPlayer> Players { get; set; } = new();

    [Inject]
    public IWebHostEnvironment WebHostEnvironment { get; set; } = default!;

    protected override void OnInitialized()
    {
        // @ disregards the \ escape (another way would be double slashes to escape the escape)
        string csvFilePath = $@"{WebHostEnvironment.ContentRootPath}\Data\players.csv";

        using (StreamReader reader = new StreamReader(csvFilePath))
        {
            // skip the header record by reading a line
            reader.ReadLine();

            // read one line at a time until the end of the file
            string? currentLine;
            while((currentLine = reader.ReadLine()) != null)
            {
                try
                {
                    HockeyPlayer? currentPlayer = null;
                    if ((currentPlayer = HockeyPlayer.Parse(currentLine)) != null)
                    {
                        Players.Add(currentPlayer);
                    }
                }
                catch (Exception e)
                {
                    FeedbackMessage = e.Message;
                }
            }

            reader.Close();
        }

        base.OnInitialized();
    }
}