@page "/service"

<h3>Service Request</h3>

<fieldset class="form-group card p-3 mb-3">
    <legend>Contact Information</legend>
    <div class="mb-3">
        <label class="form-label" for="contact-name">Contact Name:</label>
        <input class="form-control @(ErrorList.ContainsKey("contact-name") ? "is-invalid" : "")" type="text" id="contact-name" 
            @bind="ContactName" />
        @if(ErrorList.ContainsKey("contact-name"))
        {
            <div class="mt-3 alert alert-danger">@ErrorList["contact-name"]</div>
        }
    </div>
    <div class="mb-3">
        <label class="form-label" for="phone-number">Phone Number:</label>
        <input class="form-control @(ErrorList.ContainsKey("phone-number") ? "is-invalid" : "" )" type="text" id="phone-number" placeholder="123-456-7890"
        @bind="PhoneNumber" />
        @if (ErrorList.ContainsKey("phone-number"))
        {
            <div class="mt-3 alert alert-danger">@ErrorList["phone-number"]</div>
        }
    </div>
    <div class="mb-3">
        <label class="form-label" for="years">Number of Years as a Customer</label>
        <input class="form-control @(ErrorList.ContainsKey("years") ? "is-invalid" : "" )" type="number" id="years" min="0" step="1"
        @bind="YearsAsCustomer" />
        @if (ErrorList.ContainsKey("years"))
        {
            <div class="mt-3 alert alert-danger">@ErrorList["years"]</div>
        }
    </div>
    <div class="mb-3">
        <input class="form-check-input" type="checkbox" id="current-customer" 
            @bind="IsCurrentCustomer" />
        <label class="form-check-label" for="current-customer">Current Customer</label>
    </div>
</fieldset>

<fieldset class="form-group card p-3 mb-3">
    <legend>Service Information</legend>
    <div class="form-check">
        <input class="form-check-input" type="radio" name="service-type" id="internet"
            checked="@(ServiceType == "INTERNET")"
            @onclick="@(() => ServiceType = "INTERNET")"/>
        <label class="form-check-label" for="internet">Internet</label>
    </div>
    <div class="form-check">
        <input class="form-check-input" type="radio" name="service-type" id="tv"
               checked="@(ServiceType == "TV")"
            @onclick="@(() => ServiceType = "TV")" />
        <label class="form-check-label" for="tv">TV</label>
    </div>
    <div class="form-check">
        <input class="form-check-input" type="radio" name="service-type" id="internet-tv"
               checked="@(ServiceType == "INTERNET_TV")"
            @onclick="@(() => ServiceType = "INTERNET_TV")" />
        <label class="form-check-label" for="internet-tv">Internet & TV</label>
    </div>
</fieldset>

<fieldset class="form-group card p-3 mb-3">
    <legend>Required Service</legend>
    <div class="mb-3">
        <select class="form-select" id="reason" @bind="Reason">
            <option selected disabled>Select an option</option>
            <option value="interrupt">Service Interruption</option>
            <option value="new">New Service</option>
            <option value="other">Other</option>
        </select>
    </div>
    <div class="mb-3">
        <label class="form-label" for="request-info">Request Information</label>
        <textarea class="form-control" id="request-info" rows="3" @bind="ServiceRequest"></textarea>
    </div>
</fieldset>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="HandleSubmit">Submit Request</button>
</div>

@if(IsValid)
{
    <div class="mb-3 alert alert-info">
        <p>Request successfully submitted</p>
        <p>@((MarkupString)DataSent)</p>
    </div>
}

@code {
    //first fieldset
    public string? ContactName { get; set; }
    public string? PhoneNumber { get; set; } = "0";
    public int YearsAsCustomer { get; set; }
    public bool IsCurrentCustomer { get; set; }

    //second fieldset
    public string? ServiceType { get; set; }

    //third fieldset
    public string? Reason { get; set; }
    public string? ServiceRequest { get; set; }

    //form validation bool
    public bool IsValid { get; set; } = false; //named Success in Nathan's public workbook repository

    //Dictionary of string pairs named ErrorList
    public Dictionary<string, string> ErrorList { get; set; } = new();

    //data sent string
    public string? DataSent { get; set; }

    //handle submit method with verbatim string (uses @ symbol. the line breaks and tabs are rendered as 1 space)
    public void HandleSubmit()
    {
        // reset the errors
        ErrorList.Clear();

        // validate the contact
        if (string.IsNullOrWhiteSpace(ContactName))
        {
            ErrorList.Add("contact-name", "Contact name cannot be empty");
        }

        //complete validtion checks for remaining fields
        //phone number must match pattern "NNN-NNN-NNNN"
        bool invalidPhone = false;
        try
        {
            string[] phoneSplit = new string[3];
            phoneSplit = PhoneNumber.Split("-");

            // check array length
            if (phoneSplit.Length == 3)
            {
                // check the three parts are 3, 3, and 4 long.
                if (phoneSplit[0].Length == 3 && phoneSplit[1].Length == 3 && phoneSplit[2].Length == 4)
                {
                    // parse the concatenated strings
                    int firstPart = int.Parse(phoneSplit[0]);
                    int secondPart = int.Parse(phoneSplit[1]);
                    int thirdPart = int.Parse(phoneSplit[2]);
                    if (firstPart < 1000 && firstPart > 99)
                    {
                        invalidPhone = false;
                    }
                }
                else
                {
                    invalidPhone = true;
                }
            }
            else
            {
                invalidPhone = true;
            }
        }
        catch
        {
            invalidPhone = true;
        }

        if (invalidPhone)
        {
        ErrorList.Add("phone-number", "Phone number must have the pattern NNN-NNN-NNNN");
        }
        //years must be 0 or greater
        if (YearsAsCustomer < 0)
        {
            ErrorList.Add("years", "Number of years must be 0 or greater.");
        }
        //service type must not be null
        //reason cannot be default
        //required service cannot be null/empty/whitespace

        if (ErrorList.Count == 0)
        {
            //if the count is zero, the form is valid
            IsValid = true;

            // Build the output message
            DataSent = $@"<strong>Contact name: </strong>{ContactName}
            <strong>Phone: </strong>{PhoneNumber}
            <strong>Years: </strong>{YearsAsCustomer}
            <strong>Current: </strong>{IsCurrentCustomer}
            <strong>Service type: </strong>{ServiceType}
            <strong>Reason: </strong>{Reason}
            <strong>Information: </strong>{ServiceRequest}";

            // Reset the fields (manually)
            ContactName = "";
            PhoneNumber = "";
            YearsAsCustomer = 0;
            IsCurrentCustomer = false;
            ServiceType = null;
            Reason = "";
            ServiceRequest = "";
        }
    }
}